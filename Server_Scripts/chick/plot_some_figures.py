import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pylab

from mirnylib.systemutils import setExceptionHook
setExceptionHook()


########################Genes enrichment within/outside/cross domains##################
def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')


# genes_total = 20894

# blood_arm_unused = 662
# blood_arm_cross = 2336
# blood_arm_outside = 3073
# blood_arm_within = 14823

# chef_arm_unused = 662
# chef_arm_cross = 2397
# chef_arm_outside = 1891
# chef_arm_within = 15944

# blood_dix_unused = 11
# blood_dix_cross = 626
# blood_dix_outside = 1406
# blood_dix_within = 18851

# chef_dix_unused = 143
# chef_dix_cross = 1102
# chef_dix_outside = 1914
# chef_dix_within = 17735


def plot1(dot1,box1,dot2,box2,geneType,domainType):
	fig, ax = plt.subplots()

	plt.plot([2.],[dot1],marker="o",markersize=10)
	plt.text(2.,dot1 + 20, dot1, fontsize = 8)
	bp=plt.boxplot([box1],positions=[3.],whis=[5, 95],showfliers=True,patch_artist=True,flierprops=dict(marker='o', markersize=2))
	pylab.setp(bp['boxes'], color='blue')

	plt.plot([4.],[dot2],marker="o",markersize=10,color="green")
	plt.text(4.,dot2 + 20, dot2, fontsize = 8)
	bp=plt.boxplot([box2],positions=[5.],whis=[5, 95],showfliers=True,patch_artist=True,flierprops=dict(marker='o', markersize=2))
	pylab.setp(bp['boxes'], color='green')

	plt.xticks([2,3,4,5],[geneType+" "+domainType+" Blood","Shuffled Blood",geneType+" "+domainType+" ChEF","Shuffled ChEF"],rotation=45)

	ax.set_xlim([1,6])
	fig.tight_layout()
	plt.savefig(geneType+"_"+domainType+".png",dpi=300)

	plt.clf()


###################################Armatus###################################################
# plot1(blood_arm_within,
	# [14571, 14315, 14447, 14287, 14460, 14214, 14328, 14307, 14463, 14325, 14349, 14255, 14495, 14443, 14283, 14297, 14308, 14206, 14391, 14405, 14545, 14352, 14229, 14246, 14214, 14367, 14449, 14381, 14310, 14321, 14522, 14345, 14342, 14259, 14282, 14367, 14489, 14428, 14291, 14273, 14353, 14387, 14422, 14158, 14338, 14373, 14507, 14376, 14300, 14243, 14446, 14288, 14340, 14213, 14050, 14338, 14213, 14430, 14334, 14091, 14383, 14412, 14538, 14355, 14426, 14415, 14435, 14290, 14247, 14465, 14306, 14290, 14357, 14294, 14333, 14350, 14407, 14317, 14262, 14194, 14332, 14404, 14453, 14493, 14283, 14488, 14382, 14246, 14265, 14395, 14374, 14313, 14481, 14385, 14410, 14270, 14328, 13957, 14129, 14542],
	# chef_arm_within,
	# [17265, 17161, 17126, 17120, 17101, 17080, 17011, 17241, 17157, 17057, 17164, 17021, 17145, 17226, 17162, 17249, 17106, 17180, 17158, 17162, 17179, 17104, 17065, 17178, 17141, 17195, 17162, 17301, 17179, 17127, 17221, 17153, 17146, 17125, 17189, 17151, 17219, 17056, 17063, 17120, 17047, 17133, 17151, 17145, 17194, 17098, 17008, 16995, 17057, 17126, 17245, 17143, 17188, 17133, 17191, 17083, 17157, 17265, 17190, 17049, 17048, 17122, 17080, 17079, 17231, 17162, 17144, 17063, 17111, 17253, 17136, 17124, 17034, 17005, 17205, 17135, 17105, 17181, 17209, 17060, 17119, 17170, 16998, 17202, 17201, 17009, 17183, 17008, 17206, 17143, 17141, 16983, 17164, 17106, 17038, 17079, 17207, 17305, 17154, 17202],
	# "within","arm")

# plot1(blood_arm_outside,
	# [3172, 3416, 3284, 3400, 3248, 3536, 3432, 3443, 3295, 3369, 3361, 3503, 3228, 3300, 3512, 3439, 3433, 3509, 3362, 3397, 3135, 3410, 3500, 3467, 3489, 3379, 3280, 3388, 3432, 3438, 3257, 3362, 3399, 3480, 3447, 3356, 3193, 3292, 3465, 3428, 3398, 3297, 3353, 3589, 3364, 3344, 3226, 3353, 3404, 3499, 3277, 3420, 3392, 3517, 3656, 3393, 3505, 3274, 3421, 3640, 3348, 3359, 3210, 3393, 3300, 3304, 3328, 3446, 3490, 3322, 3410, 3396, 3360, 3454, 3404, 3435, 3331, 3394, 3462, 3481, 3412, 3343, 3293, 3267, 3470, 3267, 3340, 3530, 3450, 3352, 3329, 3435, 3267, 3376, 3358, 3465, 3420, 3780, 3597, 3239],
	# chef_arm_outside,
	# [1045, 1137, 1199, 1142, 1199, 1183, 1282, 1048, 1134, 1252, 1133, 1278, 1136, 1059, 1098, 1095, 1219, 1118, 1120, 1111, 1117, 1151, 1237, 1139, 1188, 1131, 1140, 1030, 1120, 1130, 1079, 1134, 1101, 1173, 1126, 1155, 1078, 1240, 1205, 1154, 1212, 1135, 1200, 1142, 1117, 1184, 1246, 1317, 1175, 1222, 1030, 1162, 1110, 1170, 1117, 1201, 1101, 1051, 1127, 1256, 1250, 1189, 1247, 1207, 1067, 1062, 1151, 1222, 1219, 1110, 1145, 1160, 1228, 1302, 1077, 1159, 1173, 1152, 1114, 1212, 1176, 1120, 1270, 1081, 1106, 1273, 1129, 1263, 1098, 1116, 1193, 1316, 1113, 1218, 1274, 1185, 1084, 1005, 1144, 1136],
	# "outside","arm")

# plot1(blood_arm_cross,
	# [2489, 2501, 2501, 2545, 2524, 2482, 2472, 2482, 2474, 2538, 2522, 2474, 2509, 2489, 2437, 2496, 2491, 2517, 2479, 2430, 2552, 2470, 2503, 2519, 2529, 2486, 2503, 2463, 2490, 2473, 2453, 2525, 2491, 2493, 2503, 2509, 2550, 2512, 2476, 2531, 2481, 2548, 2457, 2485, 2530, 2515, 2499, 2503, 2528, 2490, 2509, 2524, 2500, 2502, 2526, 2501, 2514, 2528, 2477, 2501, 2501, 2461, 2484, 2484, 2506, 2513, 2469, 2496, 2495, 2445, 2516, 2546, 2515, 2484, 2495, 2447, 2494, 2521, 2508, 2557, 2488, 2485, 2486, 2472, 2479, 2477, 2510, 2456, 2517, 2485, 2529, 2484, 2484, 2471, 2464, 2497, 2484, 2495, 2506, 2451],
	# chef_arm_cross,
	# [1922, 1934, 1907, 1970, 1932, 1969, 1939, 1943, 1941, 1923, 1935, 1933, 1951, 1947, 1972, 1888, 1907, 1934, 1954, 1959, 1936, 1977, 1930, 1915, 1903, 1906, 1930, 1901, 1933, 1975, 1932, 1945, 1985, 1934, 1917, 1926, 1935, 1936, 1964, 1958, 1973, 1964, 1881, 1945, 1921, 1950, 1978, 1920, 2000, 1884, 1957, 1927, 1934, 1929, 1924, 1948, 1974, 1916, 1915, 1927, 1934, 1921, 1905, 1946, 1934, 2008, 1937, 1947, 1902, 1869, 1951, 1948, 1970, 1925, 1950, 1938, 1954, 1899, 1909, 1960, 1937, 1942, 1964, 1949, 1925, 1950, 1920, 1961, 1928, 1973, 1898, 1933, 1955, 1908, 1920, 1968, 1941, 1922, 1934, 1894],
	# "cross","arm")

##################################DIXON###################################################

# plot1(blood_dix_within,
	# [18455, 18188, 18389, 18370, 18453, 18315, 18200, 18263, 18095, 18373, 18209, 18272, 18138, 18401, 18329, 18350, 18546, 18326, 18418, 18369, 18369, 18372, 18461, 18377, 18307, 18532, 18180, 18231, 18379, 18281, 18355, 18163, 18319, 18260, 18354, 18321, 18345, 18383, 18399, 18480, 18350, 18192, 18399, 18309, 18244, 18357, 18125, 18208, 18242, 18350, 18443, 18347, 18341, 18444, 18199, 18420, 18435, 18208, 18292, 18385, 18376, 18559, 18398, 18316, 18338, 18280, 18304, 18222, 18167, 18302, 18301, 18339, 18302, 18282, 18451, 18336, 18278, 18180, 18417, 18428, 18318, 18282, 18319, 18244, 18323, 18477, 18355, 18351, 18444, 18349, 18195, 18405, 18367, 18355, 18268, 18404, 18455, 18386, 18346, 18427],
	# chef_dix_within,
	# [18701, 18665, 18645, 18550, 18583, 18693, 18823, 18663, 18639, 18511, 18691, 18775, 18617, 18830, 18735, 18715, 18526, 18556, 18745, 18583, 18580, 18682, 18552, 18601, 18729, 18722, 18601, 18603, 18501, 18664, 18781, 18756, 18633, 18597, 18556, 18725, 18501, 18511, 18596, 18627, 18536, 18661, 18824, 18657, 18777, 18788, 18703, 18749, 18608, 18579, 18686, 18558, 18675, 18756, 18643, 18640, 18672, 18731, 18588, 18807, 18665, 18623, 18646, 18683, 18741, 18555, 18711, 18688, 18617, 18777, 18692, 18641, 18644, 18602, 18662, 18693, 18556, 18625, 18633, 18671, 18701, 18534, 18655, 18761, 18811, 18606, 18617, 18670, 18633, 18827, 18797, 18549, 18788, 18652, 18522, 18755, 18595, 18700, 18661, 18790],
	# "within","dix")

# plot1(blood_dix_outside,
	# [1768, 2013, 1812, 1842, 1761, 1887, 1980, 1917, 2125, 1829, 1995, 1909, 2065, 1822, 1864, 1827, 1686, 1887, 1808, 1826, 1856, 1834, 1745, 1843, 1908, 1691, 1984, 1962, 1852, 1880, 1842, 2038, 1851, 1944, 1834, 1874, 1846, 1805, 1813, 1723, 1852, 1998, 1791, 1887, 1943, 1836, 2098, 2009, 1961, 1850, 1774, 1837, 1874, 1759, 2007, 1829, 1757, 1988, 1932, 1837, 1821, 1638, 1820, 1902, 1877, 1953, 1905, 2001, 2054, 1923, 1903, 1858, 1872, 1924, 1758, 1860, 1902, 2034, 1836, 1764, 1879, 1912, 1866, 1973, 1899, 1736, 1835, 1844, 1735, 1852, 1991, 1828, 1849, 1861, 1949, 1798, 1751, 1812, 1873, 1781],
	# chef_dix_outside,
	# [1160, 1191, 1203, 1302, 1275, 1160, 1045, 1194, 1226, 1323, 1169, 1096, 1254, 1071, 1097, 1136, 1317, 1313, 1116, 1256, 1281, 1215, 1326, 1278, 1121, 1150, 1256, 1257, 1360, 1200, 1108, 1088, 1220, 1264, 1283, 1133, 1312, 1349, 1259, 1225, 1307, 1190, 1052, 1162, 1085, 1094, 1150, 1159, 1208, 1288, 1159, 1301, 1166, 1127, 1217, 1247, 1171, 1129, 1296, 1064, 1185, 1243, 1195, 1196, 1167, 1300, 1143, 1180, 1247, 1085, 1170, 1202, 1237, 1240, 1210, 1164, 1288, 1239, 1224, 1190, 1180, 1306, 1187, 1102, 1075, 1251, 1219, 1186, 1231, 1049, 1055, 1327, 1086, 1215, 1309, 1138, 1250, 1192, 1225, 1062],
	# "outside","dix")

# plot1(blood_dix_cross,
	# [660, 682, 682, 671, 669, 681, 703, 703, 663, 681, 679, 702, 680, 660, 690, 706, 651, 670, 657, 688, 658, 677, 677, 663, 668, 660, 719, 690, 652, 722, 686, 682, 713, 679, 695, 688, 692, 695, 671, 680, 681, 693, 693, 687, 696, 690, 660, 666, 680, 683, 666, 699, 668, 680, 677, 634, 691, 687, 659, 661, 686, 686, 665, 665, 668, 650, 674, 660, 662, 658, 679, 686, 709, 677, 674, 687, 703, 669, 630, 691, 686, 689, 698, 666, 661, 670, 693, 688, 704, 682, 697, 650, 667, 667, 666, 681, 677, 685, 664, 675],
	# chef_dix_cross,
	# [890, 895, 903, 899, 893, 898, 883, 894, 886, 917, 891, 880, 880, 850, 919, 900, 908, 882, 890, 912, 890, 854, 873, 872, 901, 879, 894, 891, 890, 887, 862, 907, 898, 890, 912, 893, 938, 891, 896, 899, 908, 900, 875, 932, 889, 869, 898, 843, 935, 884, 906, 892, 910, 868, 891, 864, 908, 891, 867, 880, 901, 885, 910, 872, 843, 896, 897, 883, 887, 889, 889, 908, 870, 909, 879, 894, 907, 887, 894, 890, 870, 911, 909, 888, 865, 894, 915, 895, 887, 875, 899, 875, 877, 884, 920, 858, 906, 859, 865, 899],
	# "cross","dix")

# fig, ax = plt.subplots()
# ax.set_yscale("log")
# bars_blood_arm = plt.bar(
	# left=[i for i in range(1,26)[::5]],
	# width=.5,
	# height = [genes_total,genes_total-blood_arm_unused,blood_arm_within,blood_arm_outside,blood_arm_cross],
	# align='center',
	# color="lightblue",
	# log=True)
# bars_blood_dix = plt.bar(
	# left=[i+1 for i in range(1,26)[::5]],
	# width=.5,
	# height = [genes_total,genes_total-blood_dix_unused,blood_dix_within,blood_dix_outside,blood_dix_cross],
	# align='center',
	# color="blue",
	# log=True)

# bars_chef_arm = plt.bar(
	# left=[i+0.5 for i in range(1,26)[::5]],
	# width=.5,
	# height = [genes_total,genes_total-chef_arm_unused,chef_arm_within,chef_arm_outside,chef_arm_cross],
	# align='center',
	# color="palegreen",
	# log=True)
# bars_chef_dix = plt.bar(
	# left=[i+1.5 for i in range(1,26)[::5]],
	# width=.5,
	# height = [genes_total,genes_total-chef_dix_unused,chef_dix_within,chef_dix_outside,chef_dix_cross],
	# align='center',
	# color="green",
	# log=True)

# plt.xticks([2.5,7.5,12.5,17.5,22.5],["Total genes","Used in analysis","Within","Outside","Cross"])
# ax.legend((bars_blood_arm, bars_blood_dix,bars_chef_arm,bars_chef_dix), ('Blood arm', 'Blood Dix',"ChEF arm","ChEF dix"))
# fig.tight_layout()
# plt.savefig("NgenesInDomains.png",dpi=300)
# plt.clf()
########################END = Genes enrichment within/outside/cross domains##################
# distances =	{
# "blood_arm_left_in" : [2534, 4111, 141224, 13691, 47071, 60968, 84337, 115916, 1121, 7694, 19461, 32007, 41365, 47368, 62941, 83349, 105802, 1970, 38266, 134567, 1628, 34163, 37624, 46076, 145, 47422, 53291, 51830, 50683, 111900, 7733, 31439, 20451, 125013, 48984, 14253, 64115, 118767, 132096, 136357, 141396, 145369, 147136, 149778, 155300, 159095, 161155, 165134, 168182, 174144, 180821, 2470, 11348, 23748, 28909, 2931, 20992, 43606, 6087, 16627, 25358, 29077, 32907, 44721, 47671, 52320, 87274, 24934, 55779, 69263, 18382, 195521, 262356, 3437, 5984, 12965, 32016, 55476, 108587, 120388, 24976, 73925, 79413, 94316, 133167, 158345, 177152, 16300, 9050, 25444, 31286, 70399, 52007, 31642, 22104, 34263, 92120, 32452, 52, 10068, 12666, 1774, 28163, 61371, 91886, 119312, 147754, 24932, 36327, 74464, 72143, 11145, 50638, 97599, 21116, 41161, 13941, 7635, 13575, 138370, 208344, 5833, 31043, 37308, 47610, 15933, 61557, 81710, 12230, 57329, 62252, 3042, 126573, 179063, 7191, 27570, 53421, 11688, 107970, 20693, 41913, 70647, 9390, 84184, 84770, 58475, 68558, 75215, 7197, 50297, 70559, 16036, 41468, 69769, 129205, 146071, 163361, 171452, 46674, 275152, 10074, 13734, 4597, 16860, 34040, 41271, 70654, 91769, 28733, 45319, 71424, 72168, 129914, 160516, 174428, 43066, 78652, 10086, 56696, 27834, 122904, 136460, 140157, 2686, 12022, 23812, 42989, 90152, 52071, 2932, 10494, 18554, 39198, 61484, 5306, 32969, 59905, 2631, 33105, 34146, 75085, 21161, 42063, 58841, 117209, 53994, 46928, 52396, 75026, 88423, 89741, 109734, 111636, 112183, 3261, 101674, 7877, 22220, 54030, 15008, 44318, 140381, 484, 44120, 9166, 9402, 9935, 21008, 41363, 3965, 19846, 55289, 4552, 70234, 100867, 44689, 29555, 35381, 50781, 22649, 7209, 50164, 92188, 94931, 271582, 33629, 116589, 46619, 63131, 32077, 32706, 112579, 79499, 348550, 10983, 56470, 86216, 34317, 18065, 32825, 38739, 79295, 83922, 93130, 29755, 52153, 149902, 59672, 2295, 3791, 8246, 47011, 2820, 16171, 28426, 39208, 44670, 68105, 92765, 95981, 46962, 32940, 45868, 4486, 37534, 37256, 144493, 61115, 92816, 123236, 198990, 228593, 336522, 396009, 43163, 58651, 119947, 170567, 127565, 52017, 45506, 52514, 54151, 58227, 62968, 63793, 69242, 4501, 32899, 81522, 26280, 21520, 17649, 38843, 50810, 15556, 16539, 24208, 137393, 864, 45947, 118296, 146740, 159863, 165004, 175399, 177945, 304995, 6776, 21182, 61744, 12570, 26561, 36668, 82096, 85287, 104325, 117478, 43469, 52882, 73436, 37052, 43208, 55964, 43506, 45957, 64750, 82293, 87722, 121653, 158248, 54807, 10512, 31087, 64679, 66159, 73750, 86357, 111229, 130630, 143562, 155166, 159005, 202819, 211207, 213043, 214341, 219398, 223817, 12066, 67075, 26991, 96604, 180597, 222268, 146715, 159749, 27971, 7640, 32252, 69336, 12080, 22174, 32770, 65120, 100868, 63730, 15490, 39034, 62351, 41512, 9529, 47367, 53138, 53683, 65656, 94884, 101261, 107559, 124314, 130895, 135253, 147995] ,
# "blood_arm_left_out" : [30579, 36384, 54815, 50610, 39099, 10386, 54985, 50777, 47687, 44735, 32287, 27786, 26484, 23208, 13039, 2955, 36499, 32829, 16413, 3059, 52128, 43328, 11317, 16969, 16811, 15830, 33159, 8763, 408, 42320, 35184, 16765, 7741, 3481, 8039, 79883, 74298, 72922, 71982, 68735, 59803, 60375, 57587, 52026, 49494, 32371, 9490, 6733, 9558, 57153, 4484, 25044, 18622, 33019, 103210, 96236, 91067, 72803, 8018, 41115, 26389, 20580, 9261, 171763, 156451, 150623, 131950, 119094, 113264, 102802, 100150, 94371, 80830, 75001, 55939, 35729, 34692, 19880, 10600, 6355, 3541, 22953, 14987, 2350307, 2334575, 433269, 252735],
# "blood_dix_left_in" : [2534, 4111, 141224, 193911, 333691, 367071, 380968, 404337, 435916, 477233, 566869, 593165, 1970, 38266, 134567, 153071, 275826, 481628, 514163, 517624, 526076, 131830, 306279, 1090683, 1151900, 467773, 103001, 120110, 161338, 195193, 254253, 304115, 358767, 372096, 376357, 381396, 385369, 387136, 389778, 395300, 399095, 401155, 405134, 408182, 414144, 420821, 501726, 510402, 543769, 575070, 583169, 613655, 621250, 642470, 651348, 663748, 9374, 18731, 26091, 34883, 47641, 52959, 63153, 63153, 67219, 78515, 100957, 122931, 140992, 163606, 185318, 192153, 198153, 230669, 247653, 122751, 125622, 133126, 18382, 195521, 262356, 12965, 59398, 70294, 73504, 106187, 32016, 55476, 69893, 104976, 73925, 79413, 94316, 133167, 158345, 177152, 205732, 254466, 70215, 92916, 107958, 113575, 172007, 383746, 608384, 936701, 999489, 350, 15954, 22946, 23096, 24099, 50068, 52666, 81421, 124910, 201774, 249446, 301043, 348163, 381371, 411886, 439312, 11145, 50638, 97599, 174888, 394197, 451990, 554792, 601161, 138370, 208344, 5833, 31043, 37308, 47610, 89649, 135555, 178158, 246349, 295933, 341557, 361710, 461639, 524546, 126573, 179063, 224048, 248409, 349713, 351413, 20693, 41913, 70647, 105011, 183719, 207113, 7197, 61697, 130297, 146862, 200938, 66768, 70268, 96036, 121468, 123388, 205961, 216650, 349769, 409205, 426071, 443361, 451452, 573036, 1856, 3233, 7428, 11587, 12990, 14367, 18152, 76095, 82097, 86570, 87205, 88759, 96649, 97926, 101196, 103177, 108174, 110920, 147552, 150521, 153275, 173734, 28733, 45319, 71424, 72168, 129914, 160516, 174428, 183948, 246893, 253323, 297310, 305358, 382054, 742524, 118652, 284258, 10243, 63169, 197187, 377496, 610086, 796949, 832744, 896696, 947297, 954137, 1027462, 1067834, 1162904, 1176460, 1180157, 1218661, 23812, 42989, 90152, 97948, 176485, 184122, 132172, 3619, 5547, 10947, 18726, 75460, 78083, 82932, 90494, 98554, 119198, 141484, 154167, 250871, 266286, 325306, 352969, 101161, 46928, 52396, 75026, 83524, 145392, 42294, 146418, 271655, 599067, 13870, 47877, 62220, 94030, 119975, 148318, 156888, 158117, 175785, 244685, 55008, 84318, 132479, 150407, 380381, 600484, 715431, 728609, 742556, 760232, 767658, 4552, 70234, 100867, 22649, 81753, 167209, 304648, 416871, 134931, 311582, 323739, 32077, 244104, 32579, 326710, 599499, 508851, 628053, 899097, 994993, 1010983, 1063685, 34317, 94306, 298065, 312825, 358066, 427644, 71803, 212153, 309902, 338695, 493378, 2820, 16171, 28426, 39208, 44670, 68105, 92765, 95981, 86962, 105203, 272940, 285868, 184493, 301247, 306089, 101115, 132816, 163236, 238990, 268593, 376522, 43163, 58651, 119947, 170567, 10563, 287565, 328729, 572017, 850199, 854141, 864585, 45506, 52514, 135259, 408140, 415004, 436931, 456140, 499813, 531, 8365, 18552, 26701, 33016, 39333, 45651, 52019, 58607, 65303, 71282, 77338, 133662, 142171, 147231, 158041, 170336, 396202, 397852, 561522, 826280, 89178, 57649, 78843, 90810, 241588, 422069, 456216, 2927, 7210, 19709, 20941, 36970, 96539, 104208, 217393, 40864, 85947, 158296, 186740, 199863, 205004, 215399, 217945, 344995, 394625, 46776, 61182, 120837, 146671, 224371, 265517, 341744, 354305, 77478, 169125, 276860, 10822, 16947, 22424, 35061, 179195, 431629, 37052, 43208, 55964, 189562, 528863, 50512, 71087, 104679, 106159, 113750, 126357, 151229, 170630, 183562, 195166, 199005, 242819, 251207, 253043, 254341, 4453, 12578, 28281, 29429, 33493, 52066, 107075, 506991, 576604, 624438, 720525, 980597, 5615, 60878, 103788, 147971, 14488, 15671, 20495, 34023, 38395, 42098, 55252, 58506, 65907, 76329, 79362, 176549, 528570, 973663, 1064078, 1756656, 2150344, 2303762, 2403311, 2509949, 2689045, 2703820, 537276, 506617, 7367, 13138, 13683, 25656, 54884, 61261, 67559, 84314, 90895, 95253, 107995, 127820, 145845, 8553, 25112, 94946, 134561],
# "blood_dix_left_out" :  [78794, 66578, 19858, 164695, 86026, 31588, 59304, 44774, 24820, 13757, 2501, 244067, 174526, 173399, 144140, 45297, 45004, 11223, 217694, 202320, 195184, 176765, 167741, 163481, 159506, 79095, 18252, 1503, 83599, 31320, 25570, 308296, 282815, 253358, 247754, 173704, 27430, 422469, 362904, 282755, 268182, 97823, 31202, 62972, 25241, 25425, 22984, 17814, 16477, 14087],
# "blood_arm_right_in" : [125998, 46972, 70667, 32200, 38207, 170408, 158406, 154492, 5395, 101404, 44212, 27140, 18010, 3427, 88685, 80609, 63765, 14182, 6005, 22400, 38488, 90202, 33001, 18512, 127579, 99044, 60892, 61401, 26416, 20393, 2659, 94905, 92543, 88648, 78337, 60904, 56057, 51642, 94377, 50843, 33238, 26946, 4799, 54543, 41947, 7887, 26, 53800, 93973, 83303, 68867, 37443, 23679, 21201, 114477, 113400, 46680, 23676, 171607, 159829, 133914, 111582, 108714, 92436, 40239, 78793, 66577, 19857, 49919, 16566, 5017, 186548, 155144, 17772, 111587, 66251, 28793, 59303, 168450, 48752, 43354, 33398, 55793, 9318, 50712, 198723, 48637, 43037, 39543, 62548, 58089, 50607, 106580, 119344, 107245, 67259, 63492, 41880, 44773, 24819, 13756, 2500, 34040, 38945, 120267, 33689, 44614, 204066, 134525, 133398, 104139, 45296, 45003, 11222, 33449, 71105, 9897, 164468, 29605, 34862, 75765, 24682, 279568, 219630, 168811, 67101, 26100, 10834, 35416, 25951, 10620, 153233, 75819, 42157, 27338, 24762, 21502, 100721, 92720, 54519, 113554, 95008, 78849, 38079, 4914, 18251, 1502, 7627, 19237, 3968, 46663, 16663, 103193, 267701, 228471, 185866, 43288, 26099, 65736, 21658, 73400, 12401, 153034, 146773, 115992, 94804, 12297, 82852, 34690, 38930, 7184, 51607, 7993, 753, 183670, 22086, 13363, 89698, 26769, 19056, 19763, 105423, 1566, 70991, 56794, 91567, 46291, 4100, 89276, 28483, 3598, 56403, 2615, 98536, 12242, 58016, 1483, 24538, 39391, 130463, 3479, 52618, 43555, 24308, 41774, 20358, 25438, 27006, 92437, 56580, 111541, 105970, 76890, 65340, 62683, 79995, 20130, 19970, 52310, 142598, 32147, 11455, 42232, 7757, 42814, 13357, 7753, 53703, 27429, 77256, 41435, 109565, 76594, 84847, 60397, 62536, 56247, 194654, 59211, 42774, 3450, 52206, 30119, 23679, 140373, 81621, 42754, 28181, 37736, 275320, 129239, 88109, 40825, 71177, 57763, 50009, 68596, 44678, 64841, 23822, 34768, 83166, 26038, 18871, 16828, 11080, 2731, 42307, 13161, 18564, 26052, 50473, 24715, 11878, 39165, 21982, 82873, 58776, 34120, 4797, 122681, 97400, 53007, 12365, 87549, 52621, 327332, 213537, 189161, 34809, 157582, 127756, 92133, 70566, 55436, 10279, 66805, 56515, 53506, 107880, 83101, 74820, 47237, 6208, 87224, 62971, 25240, 25424, 22983, 17813, 16476, 14086, 81259, 82040, 43287, 8065, 49265, 60203, 26613, 17477, 14800, 12436, 131087, 109576, 112177, 96025, 84579, 90784, 52750, 39787, 35344, 18914, 14766, 7297, 1551, 226086, 223631, 209675, 207396, 205482, 282909, 173797, 152769, 28669, 43029, 45296, 21765, 92016, 62702, 74922, 122930, 80887, 72577, 45161, 40325, 15781, 120023, 82345, 100578, 69870, 67590, 71683, 208383, 224386, 189043, 146750, 51803, 99667, 4647, 182165, 4157, 140531, 107871, 104137, 87509, 50117, 47298, 39771, 34925, 26955, 11756, 1106, 101161, 96594, 23999, 18148, 4011, 98330, 83026, 77619, 91380, 48447, 15593, 16571, 28578, 11822, 47869, 6800, 24439, 146916, 29817],
# "blood_arm_right_out" :  [8956, 1339, 9375, 18732, 26092, 34884, 47642, 52960, 2541, 25068, 32772, 47930, 56706, 4471, 27794, 70216, 351, 15955, 19638, 29120, 50622, 5962, 69318, 71419, 76289, 77673, 81857, 83234, 87429, 91588, 92991, 94368, 98153, 10244, 63170, 57497, 3480, 2789, 13153, 20481, 23108, 28536, 35562, 43620, 45548, 50948, 48685, 44686, 12256, 32791, 36108, 20483, 31804, 25740, 26063, 532, 8366, 18553, 26702, 33017, 39334, 45652, 52020, 58608, 65304, 71283, 77339, 2928, 7211, 19710, 20942, 36971, 52353, 56130, 58261, 14871, 35048, 55244, 75424, 137297, 157276, 159810, 177382, 5616, 14489, 15672, 20496, 34024, 38396, 42099, 55253, 58507, 65908, 76330, 79363, 176550, 528571, 973664, 1064079, 1756657, 2150345, 2303763, 2403312, 2509950, 20861, 48554, 65113, 134947, 174562, 211371, 264092, 284414, 321293, 337892],
# "blood_dix_right_in" :  [496840, 478803, 432556, 398208, 347893, 335400, 323330, 316926, 297141, 277537, 254344, 241858, 170409, 158407, 154493, 5396, 507141, 498011, 438396, 283428, 237017, 188828, 195199, 168686, 160610, 143766, 94183, 86006, 53462, 938802, 858334, 838489, 778268, 29497, 427519, 188979, 629229, 494906, 492544, 488649, 478338, 460905, 456058, 451643, 94378, 50844, 33239, 26947, 4800, 373801, 319539, 295147, 289519, 280191, 263610, 258828, 254985, 250777, 247687, 244735, 232287, 227786, 226484, 223208, 213039, 202955, 193842, 184058, 182423, 173456, 169874, 165887, 154099, 147674, 115864, 101713, 93974, 83304, 68868, 37444, 23680, 21202, 142784, 140078, 97502, 46681, 23677, 211608, 199830, 173915, 151583, 148715, 132437, 80240, 5018, 186549, 155145, 17773, 66252, 28794, 217404, 203355, 193399, 143658, 134651, 128795, 90313, 78302, 55794, 9319, 1323038, 1319544, 1234027, 822549, 749878, 635561, 698090, 552688, 593200, 539743, 432537, 401791, 330608, 65418, 26581, 39345, 27246, 369066, 280268, 193690, 136765, 128998, 100936, 82510, 44615, 165933, 81632, 71106, 9898, 594863, 395179, 379096, 349410, 335000, 313159, 288763, 266226, 227411, 75766, 24683, 279569, 219631, 168812, 508029, 462152, 457748, 388955, 240626, 240408, 200715, 10621, 384153, 367512, 337377, 304763, 301503, 182295, 264186, 70462, 192980, 172386, 115288, 79582, 73555, 55009, 38850, 7628, 19238, 3969, 86964, 16664, 723374, 602609, 587702, 548472, 505867, 363289, 346100, 149109, 145737, 34772, 8674, 3995, 3219, 185973, 170216, 158836, 124811, 129268, 107211, 21659, 73401, 12402, 291498, 265682, 1240754, 1233842, 1169558, 787934, 943671, 782087, 533364, 418532, 129699, 108031, 104455, 59764, 41567, 34684, 24903, 19464, 14002, 4383, 298978, 251568, 132985, 157281, 125655, 70812, 82410, 46292, 4101, 307833, 209216, 180966, 163958, 97012, 49277, 229055, 98017, 41484, 64539, 21054, 544680, 170464, 43480, 140057, 25439, 27007, 724654, 744774, 663620, 670749, 670502, 669998, 570862, 479996, 352802, 300131, 179971, 156102, 148082, 118159, 56781, 52311, 142599, 32148, 11456, 299712, 234909, 219934, 69566, 36595, 44848, 20398, 22537, 16248, 419212, 402775, 363451, 300478, 90454, 59826, 52207, 30120, 23680, 64650, 2976, 370238, 275321, 1027180, 916713, 500309, 391178, 377764, 342449, 353019, 126976, 116974, 108643, 97976, 64842, 23823, 414649, 259667, 346039, 338872, 336829, 331081, 322732, 162308, 133162, 117135, 116251, 114341, 87910, 67659, 18565, 26053, 90474, 64716, 51879, 279166, 261983, 236166, 234778, 133716, 82874, 58777, 34121, 4798, 373008, 332366, 127550, 92622, 12774, 435974, 327333, 213538, 189162, 34810, 197583, 167757, 132134, 110567, 95437, 50280, 30049, 6497, 832834, 367225, 239274, 223250, 217039, 216224, 213936, 210672, 96236, 42360, 124724, 176536, 427437, 294801, 292437, 146704, 131088, 109577, 112178, 96026, 84580, 90785, 52751, 39788, 35345, 18915, 14767, 7298, 1552, 226087, 223632, 209676, 207397, 205483, 373798, 352770, 320145, 261766, 214370, 207505, 196528, 157827, 154629, 111808, 92017, 62703, 74923, 166675, 183858, 162132, 152578, 125162, 120326, 25175, 22867, 18925, 1115, 358853, 337369, 317192, 296995, 276815, 211869, 200248, 191889, 180142, 171763, 156451, 150623, 131950, 119094, 113264, 102802, 100150, 94371, 80830, 75001, 55939, 316420, 296991, 277903, 245768, 265884, 201678, 187692, 100579, 69871, 151684, 24172, 228610, 256095, 208384, 224387, 189044, 146751, 51804, 974382, 862166, 364158, 214627, 207106, 166157, 140532, 107872, 104138, 87510, 50118, 47299, 39772, 34926, 26956, 11757, 1107, 101162, 96595, 24000, 18149, 4012, 913269, 458354, 447655, 398813, 338331, 323027, 317620, 222656, 214809, 180984, 140418, 130015, 91381, 48448, 15594, 398673, 564593, 508579, 491823, 436903, 404576, 327870, 205522, 126801, 119925, 24440, 96436, 118035, 84760, 64430, 27559, 10971],
# "blood_dix_right_out" :  [37843, 43594, 48075, 63457, 83437, 85984, 4470, 27793, 15179, 27927, 72815, 7635, 13575, 24403, 37339, 98475, 268558, 4956, 93994, 176820, 222638, 89741, 109734, 111636, 112183, 132355, 12255, 44689, 71659, 149555, 155381, 171869, 226291, 272790, 276107, 306977, 147192, 276589, 400158, 469914, 29755, 58755, 38167, 37256, 71845],
# "chef_arm_left_in" : [2534, 4111, 141224, 13691, 47071, 60968, 84337, 115916, 13150, 19461, 32007, 41365, 47368, 62941, 83349, 1791, 6973, 14567, 6076, 25399, 52676, 24002, 720, 16907, 66670, 51830, 170683, 231900, 40713, 100451, 347773, 37343, 365013, 23001, 40110, 81338, 24115, 1155, 5134, 8182, 14144, 20821, 13655, 21250, 42470, 51348, 63748, 68909, 30669, 47653, 4721, 7671, 12320, 47274, 61531, 66406, 76696, 95469, 120894, 137775, 2751, 5622, 13126, 41318, 98382, 11275, 27474, 48591, 50918, 117372, 3594, 8075, 23457, 43437, 45984, 19398, 30294, 6317, 28587, 40388, 24976, 27219, 17152, 45732, 94466, 9050, 25444, 31286, 16701, 224263, 237694, 311642, 51740, 59086, 12120, 16854, 152452, 183621, 18252, 38348, 52681, 77952, 95179, 26774, 49066, 10068, 12666, 41421, 9446, 61043, 24932, 36327, 13960, 10638, 57599, 134888, 1310, 9423, 64839, 1161, 11906, 6765, 33108, 53941, 19563, 28819, 47635, 53575, 18370, 88344, 64745, 7610, 49649, 95555, 138158, 44546, 17329, 22252, 8409, 47191, 67570, 11688, 1913, 30647, 7113, 29476, 89390, 2597, 6622, 25309, 68951, 104403, 117339, 178475, 16740, 23298, 34492, 38262, 115215, 31444, 90709, 112475, 40938, 16036, 41468, 43388, 125961, 3361, 11452, 6674, 116800, 44597, 56860, 74040, 81271, 110654, 131769, 132259, 156323, 516, 14428, 23948, 17310, 25358, 57496, 56696, 27462, 67834, 236567, 243479, 310351, 52022, 2989, 50152, 2932, 10494, 18554, 39198, 61484, 5306, 32969, 34739, 61161, 2063, 18841, 77209, 53994, 3524, 65392, 168423, 9741, 29734, 31636, 32183, 52355, 3261, 119067, 501674, 48974, 173870, 207877, 89003, 15008, 40484, 84120, 49225, 3965, 19846, 35924, 44552, 110234, 140867, 186804, 12671, 44689, 71659, 26977, 10781, 32835, 62162, 71342, 1753, 87209, 12188, 3624, 17354, 19756, 3739, 10001, 21734, 20059, 9658, 103131, 312077, 6629, 72579, 366710, 348851, 3929, 366216, 54306, 38066, 107644, 3922, 13130, 40355, 29755, 58755, 144659, 351803, 13378, 139672, 211166, 216615, 2295, 3791, 8246, 47011, 54358, 57309, 122820, 136171, 148426, 159208, 164670, 2576, 15470, 86962, 5868, 117146, 136254, 149534, 2064, 44765, 60028, 117256, 22481, 59503, 21115, 52816, 83236, 36009, 31077, 42900, 3163, 18651, 79947, 130567, 6333, 13183, 24610, 72031, 106062, 127565, 168729, 412017, 690199, 694141, 704585, 730513, 45506, 52514, 16140, 59813, 14151, 18227, 22968, 23793, 29242, 124501, 152899, 10336, 76202, 77852, 66280, 10337, 148277, 151845, 329178, 10810, 17823, 12922, 45211, 45351, 52925, 56539, 64208, 177393, 412315, 414359, 26740, 39863, 45004, 55399, 57945, 184995, 837, 26671, 104371, 145517, 221744, 42096, 45287, 64325, 88489, 119574, 119720, 89125, 196860, 92352, 96129, 98260, 116045, 130822, 136947, 142424, 155061, 37052, 43208, 55964, 3506, 5957, 24750, 42293, 47722, 81653, 118248, 168863, 10512, 31087, 64679, 66159, 73750, 86357, 111229, 130630, 143562, 155166, 19654, 12066, 67075, 16604, 525, 260597, 302268, 408199, 26715, 39749, 12175, 22466, 27971, 7640, 32252, 27024, 38967, 25120, 60868, 100107, 537276, 15490, 35476, 100936, 81512, 116926, 194031, 14884, 21261, 27559, 44314, 50895, 55253, 67995, 87820, 105845],
# "chef_arm_left_out" : [8686, 610, 116384, 134815, 130610, 119099, 90386, 59199, 37814, 24942, 14544, 1948, 33842, 24058, 22423, 13456, 9874, 5887, 11317, 2785, 8039, 89490, 86733, 70295, 62941, 6111, 99464, 94002, 78918, 84383, 74575, 72235, 68997, 57153, 4484, 44101, 9216, 27662, 5595, 4366, 20478, 98168, 91849, 85035, 79543, 23210, 16236, 11067, 32802, 26430, 19074, 17592, 9077, 171763, 156451, 150623, 131950, 119094, 113264, 102802, 100150, 94371, 80830, 75001, 55939, 35729, 34692, 19880, 10600, 6355, 3541, 22953, 14987, 2350307, 2334575, 433269, 252735],
# "chef_dix_left_in" :  [61224, 113911, 13150, 161121, 167694, 208518, 1791, 6973, 161970, 161628, 194163, 197624, 206076, 225399, 252676, 261834, 720, 16907, 66670, 88955, 118972, 291830, 170683, 231900, 40713, 100451, 37343, 365013, 1155, 5134, 8182, 14144, 20821, 101726, 110402, 143769, 175070, 183169, 213655, 221250, 242470, 251348, 263748, 268909, 370881, 505609, 509146, 514087, 525107, 540963, 543864, 30669, 47653, 6087, 16627, 25358, 29077, 32907, 44721, 47671, 52320, 87274, 101531, 106406, 116696, 135469, 160894, 177775, 179906, 41318, 98382, 18146, 194348, 211275, 3594, 8075, 23457, 43437, 45984, 234672, 285667, 327181, 13587, 46317, 28587, 40388, 127489, 269893, 304976, 390581, 467219, 17152, 45732, 94466, 198526, 270215, 132007, 208384, 536701, 599489, 12120, 16854, 152452, 183621, 18252, 38348, 52681, 77952, 95179, 107927, 152815, 1421, 44910, 121774, 169446, 221043, 268163, 301371, 331886, 359312, 13960, 31418, 209855, 472143, 1310, 9423, 64839, 1161, 11906, 6765, 33108, 53941, 7635, 13575, 88304, 378370, 448344, 7610, 49649, 95555, 138158, 206349, 255933, 301557, 321710, 11688, 107970, 7113, 29476, 89390, 24403, 37339, 98475, 16740, 23298, 34492, 38262, 115215, 177252, 187671, 198609, 207197, 311444, 370709, 392475, 461697, 16036, 41468, 43388, 125961, 136650, 269769, 329205, 346071, 363361, 371452, 493036, 116800, 170074, 330403, 1271, 30654, 51769, 52259, 76323, 145100, 188733, 205319, 231424, 232168, 289914, 518652, 177496, 27462, 67834, 236567, 243479, 310351, 52022, 107175, 2932, 10494, 18554, 39198, 61484, 74167, 170871, 186286, 245306, 272969, 101161, 53994, 136820, 182638, 3524, 65392, 168423, 222787, 26418, 3261, 511655, 839067, 48974, 173870, 207877, 89003, 220381, 84120, 49225, 35924, 44552, 110234, 140867, 31971, 26977, 170781, 192835, 222162, 231342, 298537, 434729, 502649, 561753, 647209, 784648, 3739, 30879, 233629, 265829, 267822, 290001, 301734, 467192, 9658, 103131, 312077, 6629, 72579, 366710, 74993, 90983, 143685, 366216, 54306, 18065, 32825, 78066, 147644, 184167, 239503, 438739, 479295, 483922, 493130, 520355, 538958, 629755, 658755, 744659, 951803, 2295, 3791, 8246, 47011, 54358, 57309, 122820, 136171, 148426, 159208, 164670, 188105, 212765, 215981, 294220, 362576, 375470, 86962, 105203, 272940, 285868, 397146, 416254, 429534, 444486, 477534, 568316, 22481, 59503, 21115, 52816, 83236, 158990, 188593, 296522, 356009, 3163, 18651, 79947, 130567, 32031, 66062, 90563, 367565, 408729, 652017, 45506, 52514, 128140, 135004, 156931, 176140, 219813, 14151, 18227, 22968, 23793, 29242, 124501, 152899, 10336, 236202, 237852, 401522, 666280, 50337, 188277, 191845, 17649, 38843, 50810, 17823, 615, 4688, 21188, 27939, 33425, 42927, 47210, 59709, 60941, 76970, 136539, 144208, 257393, 26740, 39863, 45004, 55399, 57945, 184995, 837, 26671, 104371, 145517, 221744, 42096, 45287, 64325, 88489, 119574, 119720, 141639, 317478, 92352, 96129, 98260, 116045, 130822, 136947, 142424, 155061, 299195, 37052, 43208, 55964, 2293, 7722, 41653, 78248, 92737, 194993, 311153, 968863, 10512, 31087, 64679, 66159, 73750, 86357, 111229, 130630, 143562, 155166, 159005, 202819, 211207, 213043, 214341, 219398, 223817, 251411, 255549, 270560, 292698, 339654, 443355, 516316, 524453, 532578, 16604, 64438, 160525, 420597, 462268, 568199, 27971, 109214, 178930, 248803, 256531, 271460, 278086, 294488, 295671, 300495, 314023, 318395, 322098, 335252, 338506, 345907, 356329, 359362, 456549, 808570, 1253663, 1344078, 2036656, 2430344, 2583762, 29336, 69208, 107024, 118967, 212080, 222174, 232770, 265120, 300868, 340107, 373427, 406216, 432356, 1017276, 1103730, 60936, 119034, 142351, 155808, 7820, 25845, 149479],
# "chef_dix_left_out" : [74557, 27293, 18707, 14735, 13696, 11887, 4977, 3938, 26, 104153, 87512, 57377, 24763, 21503, 51608, 28031, 24455, 4101, 89277, 27662, 5595, 78393, 38797, 12438, 16781, 12311, 44580, 50785, 12751, 9077, 29174, 28012, 12076],
# "chef_arm_right_in" :  [125998, 6972, 30667, 118802, 72555, 38207, 81857, 10408, 88867, 21404, 16342, 3982, 37016, 53461, 22400, 58801, 348978, 70578, 27292, 18706, 14734, 13695, 11886, 4976, 3937, 25, 87579, 59044, 20892, 21401, 54905, 52543, 48648, 38337, 20904, 16057, 11642, 14377, 133800, 79538, 55146, 49518, 40190, 23609, 18827, 14984, 10776, 7686, 4734, 51167, 62783, 60077, 17501, 33264, 3124, 11607, 13302, 118793, 106577, 59857, 34080, 31722, 13330, 45017, 26548, 134248, 111587, 7617, 219303, 78599, 68315, 28165, 6779, 17403, 3354, 1350, 2162, 38301, 15793, 166860, 10712, 116054, 8637, 62548, 33199, 81880, 5719, 53756, 42500, 26842, 20712, 16968, 16810, 15829, 58651, 98793, 91483, 14915, 36561, 120267, 33689, 42509, 4614, 84066, 14525, 13398, 85932, 5296, 5003, 1631, 204468, 69605, 7434, 75178, 59095, 29409, 14999, 35765, 39568, 185824, 145169, 132858, 17842, 28028, 80625, 80407, 40714, 80890, 55013, 2157, 57376, 24762, 21502, 20721, 12720, 35287, 170297, 17693, 2319, 98251, 81502, 79658, 66264, 13103, 86963, 16663, 105995, 87900, 23003, 12523, 63193, 122608, 107701, 68471, 25866, 149108, 145736, 34771, 8673, 3994, 3218, 172401, 118476, 101140, 88468, 35346, 11636, 26773, 51497, 25681, 173583, 602852, 471933, 314690, 58877, 38930, 7184, 51607, 66607, 28095, 56157, 27933, 183670, 22086, 49330, 249698, 15185, 26769, 19056, 28030, 24454, 58197, 25423, 70991, 56794, 52984, 77280, 45654, 2409, 89276, 68483, 39627, 43598, 78968, 58016, 1483, 24538, 130463, 3479, 188415, 163236, 132618, 123555, 104308, 121774, 100358, 9211, 105438, 107006, 67671, 38796, 12437, 174369, 71541, 65970, 36890, 25340, 22683, 63619, 70748, 70501, 69997, 192801, 140130, 19970, 16780, 12310, 11455, 44754, 29777, 13703, 107429, 4060, 121435, 18621, 29565, 4847, 34372, 366, 19825, 12206, 5291, 60373, 1621, 82903, 2754, 277736, 64649, 2975, 534960, 290237, 195320, 275388, 8109, 74527, 16107, 825, 471177, 457763, 9909, 22448, 33018, 6975, 23822, 213355, 153469, 83166, 139666, 216828, 211080, 202731, 42307, 13161, 146986, 68574, 138141, 10473, 24690, 154777, 53715, 2873, 175406, 42681, 17400, 127549, 92621, 12773, 8834, 87332, 77582, 47756, 12133, 27880, 3101, 127224, 22971, 188982, 124723, 296535, 1716, 60203, 26613, 17477, 132436, 44579, 50784, 12750, 409675, 407396, 405482, 115831, 6428, 202909, 93797, 72769, 205296, 120144, 61765, 14369, 7504, 52795, 46674, 63857, 42131, 32577, 5161, 325, 23, 122345, 60578, 29870, 3053, 271683, 144171, 146380, 115453, 102078, 106889, 105561, 68609, 96094, 48383, 64386, 29043, 19667, 124157, 20531, 50117, 47298, 39771, 34925, 26955, 11756, 1106, 101161, 96594, 23999, 18148, 4011, 38812, 22655, 14808, 88447, 55593, 5879, 398672, 116902, 84575, 7869, 104439, 32723, 28422, 26805, 25396, 96435],
# "chef_arm_right_out" : [8451, 43766, 50369, 71356, 89375, 98732, 106092, 114884, 127642, 132960, 7815, 12460, 15090, 17361, 26990, 12917, 27959, 5834, 1857, 3234, 7429, 11588, 12991, 14368, 18153, 76096, 82098, 86571, 87206, 88760, 96650, 97927, 101197, 103178, 108175, 110921, 10244, 61426, 82789, 93153, 17966, 48685, 26292, 335, 23345, 35500, 12160, 14499, 16940, 19001, 22385, 25837, 40532, 48366, 58553, 66702, 73017, 79334, 85652, 92020, 616, 4689, 21189, 27940, 33426, 6777, 14871, 35048, 55244, 75424, 137297, 157276, 159810, 177382, 5616, 14489, 15672, 20496, 34024, 38396, 42099, 55253, 58507, 65908, 76330, 79363, 176550, 528571, 973664, 1064079, 1756657, 2150345, 2303763, 2403312, 2509950, 8554, 25113, 94947, 134562, 171371, 224092, 244414, 281293, 297892],
# "chef_dix_right_in" :  [233111, 222209, 208133, 175430, 160061, 6973, 30668, 187893, 175400, 163330, 156926, 137141, 117537, 94344, 81858, 10409, 185527, 183022, 61405, 4213, 123428, 77017, 28828, 35199, 8686, 610, 22401, 58802, 410203, 548979, 177065, 153002, 138513, 114581, 70579, 294378, 250844, 233239, 226947, 204800, 183983, 179143, 171250, 163259, 149407, 145911, 116384, 134815, 130610, 119099, 90386, 59199, 37814, 24942, 14544, 1948, 173801, 119539, 95147, 89519, 80191, 63610, 58828, 54985, 50777, 47687, 44735, 32287, 27786, 26484, 23208, 13039, 2955, 274478, 273401, 72446, 22784, 20078, 33265, 3125, 191583, 188715, 172437, 120240, 13303, 314081, 260473, 249920, 216567, 191723, 173331, 5018, 134249, 487618, 219304, 78600, 68316, 28166, 6780, 17404, 3355, 252128, 243328, 211317, 183658, 174651, 168795, 130313, 118302, 95794, 49319, 10713, 723038, 719544, 634027, 222549, 149878, 35561, 98090, 124774, 104820, 93757, 82501, 66843, 60713, 56969, 56811, 55830, 27605, 329066, 240268, 153690, 96765, 88998, 60936, 42510, 4615, 84067, 14526, 13399, 605297, 605004, 571223, 509439, 463083, 459396, 273450, 1632, 204469, 69606, 7435, 75179, 59096, 29410, 15000, 319569, 259631, 208812, 34371, 13707, 2785, 395417, 385952, 348029, 302152, 297748, 228955, 80626, 80408, 40715, 80891, 55014, 155683, 132313, 95077, 20722, 12721, 115288, 79582, 73555, 55009, 38850, 170298, 17694, 2320, 413104, 366664, 287385, 166964, 96664, 8039, 243374, 122609, 107702, 68472, 25867, 354772, 328674, 323995, 323219, 318423, 317670, 314874, 311600, 307218, 305989, 303362, 297891, 239883, 234298, 232922, 231982, 228735, 219803, 220375, 217587, 212026, 209494, 192371, 169490, 166733, 150295, 142941, 25973, 10216, 309521, 300229, 233035, 226774, 195993, 174805, 92298, 51498, 25682, 173584, 602853, 514691, 162770, 126111, 58878, 38931, 7185, 66608, 28096, 56158, 27934, 183671, 22087, 49331, 249699, 15186, 139764, 225424, 121567, 114684, 104903, 99464, 94002, 78918, 84383, 74575, 72235, 68997, 57153, 4484, 218978, 171568, 52985, 77281, 45655, 2410, 67833, 43599, 344019, 328504, 315277, 323690, 298537, 151320, 118969, 58017, 1484, 24539, 504680, 130464, 3480, 188416, 163237, 132619, 123556, 104309, 121775, 100359, 9212, 25439, 27007, 101401, 71542, 65971, 36891, 25341, 22684, 63620, 70749, 70502, 69998, 192802, 140131, 19971, 182599, 312148, 291456, 272008, 230669, 202233, 124755, 109778, 39226, 47758, 4366, 858622, 699712, 634909, 619934, 469566, 436595, 444848, 420398, 422537, 416248, 34373, 367, 59212, 42775, 3451, 518049, 380374, 321622, 142469, 82904, 2755, 277737, 64650, 2976, 494961, 250238, 155321, 409240, 275389, 8110, 107180, 471178, 457764, 813356, 753470, 683167, 499704, 294649, 139667, 226039, 218872, 216829, 211081, 202732, 42308, 13162, 193303, 578777, 554121, 524798, 463637, 135407, 2682, 207550, 172622, 92774, 367333, 253538, 229162, 74810, 77583, 47757, 12134, 906806, 896516, 893507, 832834, 127225, 222972, 185241, 185425, 182984, 177814, 176477, 174087, 158417, 148683, 138898, 130915, 124283, 117548, 111814, 105280, 98168, 91849, 85035, 79543, 23210, 16236, 11067, 164724, 329266, 256536, 60204, 26614, 17478, 132437, 386087, 383632, 369676, 367397, 365483, 75832, 202910, 93798, 72770, 369, 205297, 120145, 61766, 14370, 7505, 242931, 200888, 46675, 63858, 42132, 32578, 5162, 326, 480024, 358853, 337369, 317192, 296995, 276815, 211869, 200248, 191889, 180142, 171763, 156451, 150623, 131950, 119094, 113264, 102802, 100150, 94371, 80830, 75001, 55939, 162346, 36420, 16991, 311684, 184172, 530600, 526355, 523541, 506132, 299282, 484158, 334627, 327106, 286157, 260532, 227872, 224138, 207510, 170118, 167299, 159772, 154926, 146956, 131757, 121107, 114451, 59271, 22953, 14987, 2674106, 2568791, 2390307, 2374575, 473269, 18354, 7655, 292735, 4593, 285522, 206801, 199925, 104440, 32724, 28423, 26806, 25397, 306868, 300331, 283732, 213935, 173629, 118035, 84760, 64430, 27559, 10971],
# "chef_dix_right_out" :  [24115, 32016, 55476, 11321, 8409, 109713, 111413, 56696, 2989, 50152, 57948, 136485, 144122, 17965, 42063, 58841, 117209, 12255, 25318, 3965, 19846, 6333, 13183, 12922, 45211, 45351, 52925, 6776, 14884, 21261, 27559]
# }
########################Genes count depending on dist to border of domains##################

def genes_count_depending_on_dist_to_border(bands,bandsh,filename,subplotNumber=111,saveFig = True,legend_postfix="",linestyle="solid",
											colors= ["red","green","blue","yellow","black"],vlines=[0]):
	ax=plt.subplot(subplotNumber)
	plt.xticks(rotation=90,fontsize=5)
	plt.yticks(fontsize=7)
	for i in vlines:
		plt.axvline(x=i,lw=".2",ls=":")
	for ind,band in enumerate(bands.keys()):
#		if float(band) != 80000:
#			continue
		assert np.all([i==j for i,j in zip(bands[band]["X"],bandsh[band]["X"])])
		plt.plot(bands[band]["X"],bands[band]["Y"],label="band="+str(band)+legend_postfix,color=colors[ind],marker="o",linestyle=linestyle)
		plt.plot(bandsh[band]["X"],bandsh[band]["Y"],label="Ctrl_band="+str(band)+legend_postfix,color="black",marker="o",markersize=1,linestyle=linestyle)
		
		plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,ncol=2, mode="expand", borderaxespad=0.,fontsize=4)
	plt.tight_layout()

	if saveFig:
		plt.savefig(filename,dpi=300)
		plt.clf()

def genes_count_depending_on_dist_to_border_allDomainsHmap(sides,filename,highlight="center",saveFig = True):
	import scipy.cluster.hierarchy as sch
	
	for ind,band in enumerate(sides["left"].keys()):
		# if float(band) != 80000:
			# continue
		D_Left = np.array(sides["left"][band]["table"])
		D_Right = np.array(sides["right"][band]["table"])
#		D = np.add(D_Left,D_Right)
#		D = D_Right
		D = np.vstack((D_Left,D_Right))
		if highlight == "center":
			coeff = np.sum(D,axis=1)
			D = np.nan_to_num(D / coeff[:,None])
			toSort = [sum([0.5*val*abs(len(i)/2-ind) for ind,val in enumerate(i)]) for i in D] #to highlight center
			#toSort = [sum([1.*val/(10*abs(len(i)/2-ind)) for ind,val in enumerate(i)]) for i in D]
			#toSort = [sum([abs(len(i)/2-ind) for ind,val in enumerate(i)]) for i in D]
			index = np.argsort(toSort)
			D = np.log(D[index,:]+np.average(D)/1000)
		elif highlight == "border":
			coeff = np.sum(D,axis=1)
			D = np.nan_to_num(D / coeff[:,None])
			toSort = [sum(i[0:len(i)/2])-sum(i[len(i)/2:]) for i in D] #to highlight center
			#Y = sch.linkage(D, method='single')
			#Z = sch.dendrogram(Y, no_plot=True)
			#index = Z['leaves']
			index = np.argsort(toSort)
			D = np.log(D[index,:]+np.average(D)/1000)
		
		plt.imshow(D,cmap='seismic', interpolation='nearest',aspect=0.04/(len(D)/6204.))

		if saveFig:
			plt.savefig(str(band)+filename,dpi=300)
			plt.clf()
			
def genes_count_depending_on_dist_to_border_allDomainsPlots(sides,filename,highlight="center",saveFig = True):
	import scipy.cluster.hierarchy as sch
	
	for ind,band in enumerate(sides["left"].keys()):
		# if float(band) != 80000:
			# continue
		D_Left = np.array(sides["left"][band]["table"])
		D_Right = np.array(sides["right"][band]["table"])
#		D = np.add(D_Left,D_Right)
#		D = D_Right
		D = np.vstack((D_Left,D_Right))
		for i in D:
			plt.plot(range(len(i)),i,marker=None,color="k")

		if saveFig:
			plt.savefig(str(band)+filename,dpi=300)
			plt.clf()

def plot_all_hmaps(prefix = "",highlight="center"):
	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Dixon_plots["Blood"][0]]["notshuffled"],prefix+"_Blood_Dix_hmap.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Dixon_plots["ChEF"][0]]["notshuffled"],prefix+"_ChEF_Dix_hmap.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Arm_plots["ChEF"][0]]["notshuffled"],prefix+"_ChEF_Arm_hmap.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Arm_plots["Blood"][0]]["notshuffled"],prefix+"_Blood_Arm_hmap.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Dixon_plots["Blood"][0]]["shuffled"],prefix+"_Blood_DixShuff_hmap.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Dixon_plots["ChEF"][0]]["shuffled"],prefix+"_ChEF_DixShuff_hmap.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Arm_plots["ChEF"][0]]["shuffled"],prefix+"_ChEF_ArmShuff_hmap.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsHmap(
				to_plot[Arm_plots["Blood"][0]]["shuffled"],prefix+"_Blood_ArmShuff_hmap.png",
				saveFig=True,highlight=highlight)

def plot_all_plots(prefix = "",highlight="center"):
	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Dixon_plots["Blood"][0]]["notshuffled"],prefix+"_Blood_Dix_plot.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Dixon_plots["ChEF"][0]]["notshuffled"],prefix+"_ChEF_Dix_plot.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Arm_plots["ChEF"][0]]["notshuffled"],prefix+"_ChEF_Arm_plot.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Arm_plots["Blood"][0]]["notshuffled"],prefix+"_Blood_Arm_plot.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Dixon_plots["Blood"][0]]["shuffled"],prefix+"_Blood_DixShuff_plot.png",
				saveFig=True,highlight=highlight)

	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Dixon_plots["ChEF"][0]]["shuffled"],prefix+"_ChEF_DixShuff_plot.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Arm_plots["ChEF"][0]]["shuffled"],prefix+"_ChEF_ArmShuff_plot.png",
				saveFig=True,highlight=highlight)
				
	genes_count_depending_on_dist_to_border_allDomainsPlots(
				to_plot[Arm_plots["Blood"][0]]["shuffled"],prefix+"_Blood_ArmShuff_plot.png",
				saveFig=True,highlight=highlight)
		
import ast
#lines = open("domains_properties.txt").readlines()
#lines = open("domains_properties_6_E1_fulllog.txt").readlines()
# prefix = "E1"
# highlight = "border"

# lines = [l.strip() for l in lines]
# starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=True_file_prefix="+prefix]
#starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=False_file_prefix=ncRNAgenes"]
#starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=False_file_prefix=low_expressed"]
#starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=True_file_prefix=FPKM_median"]

# to_plot = {}
# for ind in starts:
	# fname_line_ind = ind
	# while fname_line_ind > 0 and not lines[fname_line_ind].startswith("domains_properties.py"):
		# fname_line_ind-= 1
	# if fname_line_ind <0:
		# raise
	
	# fname = lines[fname_line_ind].split()
	# type = fname[4].split("/")[-1]
	# fname = fname[2]
	
	# if type.endswith(".shuffled"):
		# fname += ".".join(type.split(".")[:-1])
		# type = "shuffled"
	# else:
		# fname += type
		# type = "notshuffled"
	
	# if fname in to_plot.keys():
		# to_plot[fname][type] = {}
	# else:
		# to_plot[fname] = {}
		# to_plot[fname][type] = {}
	# ind += 1

	# while (lines[ind].startswith("side") or lines[ind].startswith("X:") or lines[ind].startswith("Y:") or lines[ind].startswith("band") or lines[ind].startswith("T:\t")):
		# if lines[ind].startswith("side"):
			# side = lines[ind].split()[-1]
			# to_plot[fname][type][side] = {}
		# if lines[ind].startswith("band"):
			# band = lines[ind].split()[-1]
			# to_plot[fname][type][side][band] = {}
			# to_plot[fname][type][side][band]["table"] = []			
		# if lines[ind].startswith("X:"):
			# to_plot[fname][type][side][band]["X"] = ast.literal_eval(lines[ind][3:])
		# if lines[ind].startswith("Y:"):
			# to_plot[fname][type][side][band]["Y"] = ast.literal_eval(lines[ind][3:])
		# if lines[ind].startswith("T:\t"):
			# to_plot[fname][type][side][band]["table"].append(ast.literal_eval(lines[ind][3:]))
		# ind += 1
		# if ind == len(lines):
			# print "[Warning!], unexpected end of file"
			# break
			
# Dixon_plots= {"Blood":[i for i in to_plot.keys() if ("dixon" in i.lower() and "blood" in i.lower())],
				# "ChEF":[i for i in to_plot.keys() if ("dixon" in i.lower() and "chef" in i.lower())]
				# }
# Arm_plots= {"Blood":[i for i in to_plot.keys() if ("gzipped_matrix" in i.lower() and "blood" in i.lower())],
				# "ChEF":[i for i in to_plot.keys() if ("gzipped_matrix" in i.lower() and "chef" in i.lower())]
				# }

# plot_all_hmaps(prefix=prefix,highlight=highlight)

# side_order_on_fig = {"left":1,"center":2,"right":3}
# for i,temp in zip(Dixon_plots["Blood"]+Dixon_plots["ChEF"],[0,3]):
	# for j in to_plot[i]["shuffled"].keys():
		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"][j],to_plot[i]["shuffled"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False)
# plt.savefig("Dixon_genes_count_depending_on_dist_to_border_"+prefix+".png",dpi=300)
# plt.clf()

# for i,temp in zip(Arm_plots["Blood"]+Arm_plots["ChEF"],[0,3]):
	# for j in to_plot[i]["shuffled"].keys():
		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"][j],to_plot[i]["shuffled"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False)
# plt.savefig("Arm_genes_count_depending_on_dist_to_border_"+prefix+".png",dpi=300)
# plt.clf()
########################END = Genes count depending on dist to border of domains##################

########################Sizes of domains borders##################
# d_blood = generate_domains_from_file("Blood-all-HindIII-40k.hm.gzipped_matrix/Blood-all-HindIII-40k.hm.gzipped_matrix.jucebox_domains.annotation")
# d_chef = generate_domains_from_file("ChEF-all-HindIII-40k.hm.gzipped_matrix/ChEF-all-HindIII-40k.hm.gzipped_matrix.jucebox_domains.annotation")
# b=d_blood[1:]["start"]-d_blood[:-1]["end"]
# c=d_chef[1:]["start"]-d_chef[:-1]["end"]

# def plot_hist(data,X,color):
	# Y = []
	# for ind,val in enumerate(X[:-1]):
		# Y.append(sum(np.logical_and(data>=val,data<X[ind+1])))
	# Y.append(sum(data>=X[-1]))
	# print Y
	# Y = np.array(Y,dtype=float) / sum(Y)
	# print Y
	# plt.bar(left=np.arange(len(X)),height=Y,width=1.,color=color,tick_label=map(str,X),alpha=0.5)

# plt.clf()
# X=[1,40001,80001,160001,max(max(c),max(b))]
# plot_hist(b,X,"blue")
# plot_hist(c,X,"green")
# plt.savefig("hist_border_sizes.png",dpi=300)
########################END = Sizes of domains borders##################

########################Histogramm of Nof genes near domains borders##################
# lines = open("domains_properties.txt").readlines()
# lines = [l.strip() for l in lines]
# starts = [ind for ind,l in enumerate(lines) if l=="genes_count_crossing_border"]
# to_plot = {}
# max_genes_N = 0
# for ind in starts:
	# fname = lines[ind-2].split()
	# type = fname[4].split("/")[-1]
	# fname = fname[2]
	
	# if type.endswith(".shuffled"):
		# fname += ".".join(type.split(".")[:-1])
		# type = "shuffled"
	# else:
		# fname += type
		# type = "notshuffled"
	
	# if fname in to_plot.keys():
		# to_plot[fname][type] = {}
	# else:
		# to_plot[fname] = {}
		# to_plot[fname][type] = {}
	
	# while not ("Done" in lines[ind]):
		# ind += 1
		# if ind == len(lines):
			# break
			# print "Warning, unexpected end of file"

		# if lines[ind].startswith("Left:") or lines[ind].startswith("Right:"):
			# side = lines[ind].split("\t")[0][:-1]
			# to_plot[fname][type][side] = ast.literal_eval(lines[ind].split("\t")[-1])
			# max_genes_N = max(max_genes_N,max(to_plot[fname][type][side]))
# print max_genes_N
# for i in to_plot.keys():
	# plt.clf()
	# fig,ax = plt.subplots()
	# ax.set_xlim(-1*(max_genes_N+1),max_genes_N+1)
	# ax.set_ylim(0,1)
	# plt.xticks(range(-1*(max_genes_N),(max_genes_N+1)),map(str,range(0,max_genes_N+1)[::-1])+map(str,range(1,max_genes_N+2)))
	# for sh in ["notshuffled","shuffled"]:
		# if sh == "shuffled":
			# color = "black"
			# markersize = 1
		# elif "blood" in i.lower():
			# color = "blue"
			# markersize = 5
		# else:
			# color = "green"
			# markersize = 5
		# Y = np.bincount(to_plot[i][sh]["Left"],minlength=max_genes_N+1)
		# Y = Y / float(sum(Y))
		# plt.plot(range(max_genes_N+1),Y,color=color,marker="o",markersize=markersize)

		# Y = np.bincount(to_plot[i][sh]["Right"],minlength=max_genes_N+1)
		# Y = Y / float(sum(Y))
		# plt.plot(range(-max_genes_N,1)[::-1],Y,color=color,marker="o",markersize=markersize)
	
	# plt.savefig(i+"NgenesCrossingBorderHisto.png")

	
# for i in to_plot.keys():
	# plt.clf()
	# fig,ax = plt.subplots()
	# ax.set_xlim(0,max_genes_N+1)
	# ax.set_ylim(0,1)
	# for sh in ["notshuffled","shuffled"]:
		# if sh == "shuffled":
			# color = "black"
			# markersize = 1
		# elif "blood" in i.lower():
			# color = "blue"
			# markersize = 5
		# else:
			# color = "green"
			# markersize = 5
		# Y = [min(l,r) for l,r in zip(to_plot[i][sh]["Left"],to_plot[i][sh]["Right"])]
		# Y = np.bincount(Y,minlength=max_genes_N+1)
		# Y = Y / float(sum(Y))
		# plt.plot(range(max_genes_N+1),Y,color=color,marker="o",markersize=markersize)
	# plt.savefig(i+"NgenesCrossingBorderHistoBothSides.png")

# plt.clf()

######################################################Interchromosomal heatmaps############################################################

def plot_interchrm_obz_exp(filename):
	order = np.array(open(filename).readline().strip().split())[1:]
	a=np.loadtxt(filename)
	assert len(order) == len(a), "Length of header ("+str(len(order))+") <> length of array ("+str(len(a))+")"+"order:\n"+" ".join(order)

	new_arr = np.zeros_like(a)

	def sortfunct(s):
		if s in ["chrW","chrZ"]:
			return 10000000
		elif "chr16" in s:
			return 100*len("chr16")
		else:
			return 100*len(s)

	sortorder = sorted(range(len(order)), key=lambda k: (sortfunct(order[k]),order[k]))

	for i in xrange(len(a)):
		for j in xrange(len(a)):
			new_arr[i,j] = a[sortorder[i],sortorder[j]]
			
	from mirnylib import plotting
	plt.clf()
#	plotting.plot_matrix(np.log2(new_arr),rotateticklabels2=True,ticklabels1=order[sortorder],ticklabels2=order[sortorder],vmin=-4.5,vmax=6.5)
	plotting.plot_matrix(np.log2(new_arr),rotateticklabels2=True,ticklabels1=order[sortorder],ticklabels2=order[sortorder])
	plt.tight_layout()
	plt.savefig(filename+".png",dpi=300)
	plt.clf()

# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_B.chrmLevel.splitChr16_2.obz-expect.txt")
# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_E.chrmLevel.splitChr16_2.obz-expect.txt")
# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_B.chrmLevel.obz-expect.txt")
# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_E.chrmLevel.obz-expect.txt")
# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_E1.chrmLevel.obz-expect.txt")
# plot_interchrm_obz_exp("/mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/all_interchrmal_contacts/all_E2.chrmLevel.obz-expect.txt")

######################################################END Interchromosomal heatmaps############################################################


########################Genes count depending on dist to border of domains in micro and macro##################

# import ast
# lines = open("domains_properties_2.txt").readlines()
# lines = [l.strip() for l in lines]
# starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=False_file_prefix=genes.micro" or
												# l=="genes_count_depending_on_dist_to_border_calcFPKMs=False_file_prefix=genes.macro"]
# starts = [ind for ind,l in enumerate(lines) if l=="genes_count_depending_on_dist_to_border_calcFPKMs=True_file_prefix=FPKM_median"]

# to_plot = {}
# for ind in starts:
	# fname_line_ind = ind
	# while fname_line_ind > 0 and not lines[fname_line_ind].startswith("domains_properties.py"):
		# fname_line_ind-= 1
	# if fname_line_ind <0:
		# raise
	
	# fname = lines[fname_line_ind].split()
	# type = fname[4].split("/")[-1]
	# fname = fname[2]
	
	# if type.endswith(".shuffled"):
		# fname += ".".join(type.split(".")[:-1])
		# type = "shuffled"
	# else:
		# fname += type
		# type = "notshuffled"
	
	# if ".micro" in lines[ind]:
		# chrType = "micro"
	# elif ".macro" in lines[ind]:
		# chrType = "macro"
	# else:
		# raise
	
	# if not fname in to_plot.keys():
		# to_plot[fname] = {}
	# if not type in to_plot[fname].keys():
		# to_plot[fname][type] = {}
	# if not chrType in to_plot[fname][type].keys():
		# to_plot[fname][type][chrType] = {}
		
	# ind += 1
	# while (lines[ind].startswith("side") or lines[ind].startswith("X:") or lines[ind].startswith("Y:") or lines[ind].startswith("band")):
		
		# if ind == len(lines):
			# break
			# print "Warning, unexpected end of file"
		
		# if lines[ind].startswith("side"):
			# side = lines[ind].split()[-1]
			# to_plot[fname][type][chrType][side] = {}
		# if lines[ind].startswith("band"):
			# band = lines[ind].split()[-1]
			# to_plot[fname][type][chrType][side][band] = {}
		# if lines[ind].startswith("X:"):
			# to_plot[fname][type][chrType][side][band]["X"] = ast.literal_eval(lines[ind][3:])
		# if lines[ind].startswith("Y:"):
			# to_plot[fname][type][chrType][side][band]["Y"] = ast.literal_eval(lines[ind][3:])
		# ind += 1

# Dixon_plots= {"Blood":[i for i in to_plot.keys() if ("dixon" in i.lower() and "blood" in i.lower())],
				# "ChEF":[i for i in to_plot.keys() if ("dixon" in i.lower() and "chef" in i.lower())]
				# }
# Arm_plots= {"Blood":[i for i in to_plot.keys() if ("gzipped_matrix" in i.lower() and "blood" in i.lower())],
				# "ChEF":[i for i in to_plot.keys() if ("gzipped_matrix" in i.lower() and "chef" in i.lower())]
				# }
# side_order_on_fig = {"left":1,"center":2,"right":3}
# print Dixon_plots
# microChr_colors= ["red","yellow","deepskyblue"]
# macroChr_colors= ["cadetblue","olive","lightsage"]
# for i,temp in zip(Dixon_plots["Blood"]+Dixon_plots["ChEF"],[0,3]):
	# for j in to_plot[i]["shuffled"]["micro"].keys():
		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"]["micro"][j],to_plot[i]["shuffled"]["micro"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False,linestyle="dashed",legend_postfix="_micro",colors=microChr_colors)

		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"]["macro"][j],to_plot[i]["shuffled"]["macro"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False,linestyle="solid",legend_postfix="_macro",colors=macroChr_colors)
												
# plt.savefig("Dixon_genes_count_depending_on_dist_to_border_MicroMacro.png",dpi=300)
# plt.clf()

# for i,temp in zip(Arm_plots["Blood"]+Arm_plots["ChEF"],[0,3]):
	# for j in to_plot[i]["shuffled"]["micro"].keys():
		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"]["micro"][j],to_plot[i]["shuffled"]["micro"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False,linestyle="dashed",legend_postfix="_micro",colors=microChr_colors)

		# genes_count_depending_on_dist_to_border(to_plot[i]["notshuffled"]["macro"][j],to_plot[i]["shuffled"]["macro"][j],
												# i,
												# subplotNumber=230+side_order_on_fig[j]+temp,saveFig = False,linestyle="solid",legend_postfix="_macro",colors=macroChr_colors)
												
# plt.savefig("Arm_genes_count_depending_on_dist_to_border_MicroMacro.png",dpi=300)
# plt.clf()
########################END = Genes count depending on dist to border of domains in micro and macro chrs##################

##################################PLOT BETWEEN=REPLICA CORRELATIONS HEATMAP###############################################
def plot_correlation_hmap(fname,arr,labels):
	plt.title(fname)
	
	plt.xticks(list(range(arr.shape[1])))
	plt.yticks(list(range(arr.shape[0])))
	
	plt.gca().set_xticklabels(labels,rotation="vertical",size="x-small")
	plt.gca().set_yticklabels(labels,size="x-small")
	
	plt.gca().tick_params(axis=u'both', which=u'both',length=0)
	
	for i in xrange(len(arr)):
		for j in xrange(i,len(arr)):
			arr[j,i]=arr[i,j]
	
	arr[np.where(arr==0.)] = None
	plt.imshow(arr,interpolation='nearest',cmap='BuGn')
	for (j,i),label in np.ndenumerate(arr):
		if not np.isnan(arr[i,j]):
			plt.gca().text(i,j,"{:.4f}".format(label),ha='center',va='center',size="x-small")
	plt.colorbar()
	plt.savefig(fname,dpi=600)
	plt.clf()

def read_correalation_data(fname):
	arr = np.loadtxt(fname)
	labels = [" ".join(i.split("-")[0:2]) for i in open(fname).readline().strip().split()[1:]]
	plot_correlation_hmap(fname+".png",arr,labels)

read_correalation_data("05_Bin-wise-pearson-comparison.py_figs/correlations_res1000000.txt")
read_correalation_data("05_Bin-wise-pearson-comparison.py_figs/correlations_res100000.txt")
	
##################################END PLOT BETWEEN=REPLICA CORRELATIONS HEATMAP###############################################