from mirnylib import plotting
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from mirnylib import genome
from mirnylib import h5dict
from hiclib import binnedData
import numpy as np
from mirnylib.systemutils import setExceptionHook

setExceptionHook()


########define file names and other params
#mirnylib genome params
genomeName = "GalGal5filtered"
genome_db = genome.Genome("/mnt/storage/home/vsfishman/HiC/fasta/GalGal5/GCF_000002315.4_Gallus_gallus-5.0_assembly_structure/Primary_Assembly/galGal5_all_contigs.filtered/",
				readChrms=[],
				chrmFileTemplate="N%s.fa")

#where to find hic lib heatmap
basefolder = "/mnt/storage/home/vsfishman/HiC/data/chick/mapped-GalGal5filtered/B1_TTAGGC_L001_/"
filename = "chunk0001.hdf5.hm-res-1000kb"

#resulting file name
out_file = "all.glm"

###parameters requerd by LACHESIS to be in the header
header_string = """# GenomeLinkMatrix file - see GenomeLinkMatrix.h for documentation of this object type
# Species = chick
# N_bins = 524
# bin_size = 0
# RE_sites_file = /mnt/storage/home/vsfishman/HiC/fasta/GalGal5/GCF_000002315.4_Gallus_gallus-5.0_assembly_structure/Primary_Assembly/galGal5_all_contigs.filtered.fa.counts_AAGCTT.txt
# SAM files used in generating this dataset: /mnt/storage/home/vsfishman/tmp/Distr/Chick_HiC/small_fastq/B1.sam
X	Y	Z
"""

#LACHESIS use indexes for each contig
#this indexes are (as I understood from source) generated by samtools when it reads sam header
#I wrote a script that corresponds number to contig names
#output of the script mus be povided
#I've also checked that in numpy_array files generated from bwa alignments order of contigs is same as in contig_names_to_id_file
contig_names_to_id_file = "samtools_contig_to_id_out.txt"

###########################

#1. Parse contig_names_to_id_file
LACHES_index_converter={}
with open(contig_names_to_id_file) as f:
	for line in f:
		line = line.strip().split()
		LACHES_index_converter[line[1]]=line[0]
		
out_file= open(out_file,"w")
out_file.write(header_string)

raw_heatmap = h5dict.h5dict(basefolder+filename, mode='r') 
resolution = int(raw_heatmap['resolution'])
BD = binnedData.binnedData(resolution, genome_db)
BD.simpleLoad(basefolder+filename, 'HindIII')
q=BD.dataDict['HindIII']
interchr_contacts = np.zeros(shape=(genome_db.chrmCount,genome_db.chrmCount))

############################
#genome_db.chrmCount=100
############################

zero_number_of_contacts, nonzero_number_of_contacts = [],[]

for chr1 in xrange(genome_db.chrmCount):
	for chr2 in xrange(chr1+1,genome_db.chrmCount):
		Ncontacts = q[genome_db.chrmStartsBinCont[chr1]:genome_db.chrmEndsBinCont[chr1],
					genome_db.chrmStartsBinCont[chr2]:genome_db.chrmEndsBinCont[chr2]]

		Ncontacts = int(np.sum(Ncontacts))
		if Ncontacts == 0: 
			continue
		interchr_contacts[chr1,chr2] = float(Ncontacts) / (genome_db.chrmLensBin[chr1] * genome_db.chrmLensBin[chr2])
		interchr_contacts[chr2,chr1] = interchr_contacts[chr1,chr2]
		
		chr1_idx = LACHES_index_converter["N"+genome_db.idx2label[chr1]]
		chr2_idx = LACHES_index_converter["N"+genome_db.idx2label[chr2]]
		out_file.write("\t".join(map(str,[chr1_idx,chr2_idx,Ncontacts]))+"\n")
		out_file.write("\t".join(map(str,[chr2_idx,chr1_idx,Ncontacts]))+"\n")		
out_file.close()

print [sum(interchr_contacts[i]) for i in xrange(len(interchr_contacts))]


interchr_contacts2 = np.array(interchr_contacts+1.)
interchr_contacts2 = 1./interchr_contacts2 

contig_types_file = "/mnt/storage/home/vsfishman/HiC/fasta/GalGal5/GCF_000002315.4_Gallus_gallus-5.0_assembly_structure/Primary_Assembly/contig.names"
contig_types={}
contig_types_N = {}

with open(contig_types_file) as f:
	for line in f:
		line = line.strip().split()
		try:
			contig_types[line[1]].append(line[0])
		except:
			contig_types[line[1]]=[line[0]]
			contig_types_N[line[1]] = 0
			

         
for i in xrange(len(interchr_contacts2)):
	interchr_contacts2[i,i]=0.
	contig_name = "N"+genome_db.idx2label[i]
	k = [k for k in contig_types if contig_name in contig_types[k]][0]
	if sum(interchr_contacts[i])==0. :
		zero_number_of_contacts.append(contig_name)
	else:
		nonzero_number_of_contacts.append(contig_name)
		contig_types_N[k] += 1
print "Non-zero contigs\n",contig_types_N,"\nTotal contigs ",len(interchr_contacts2)
		
print zero_number_of_contacts,nonzero_number_of_contacts
	
import scipy.spatial.distance as ssd
# convert the redundant n*n square matrix form into a condensed nC2 array
print  len(interchr_contacts2),genome_db.chrmCount
distArray = ssd.squareform(interchr_contacts2) # distArray[{n choose 2}-{n-i choose 2} + (j-i-1)] is the distance between points i and j
from scipy.cluster.hierarchy import dendrogram, linkage
Z = linkage(distArray, 'single')
from scipy.cluster.hierarchy import fcluster
result = fcluster(Z, 40, criterion='maxclust')
print result
print max(result)

plt.figure(figsize=(25, 10))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('sample index')
plt.ylabel('distance')
dendrogram(
    Z,
    leaf_rotation=90.,  # rotates the x axis labels
    leaf_font_size=8.,  # font size for the x axis labels
)
plt.savefig("test.png")
plt.clf()

plt.figure(figsize=(25, 10))
plotting.plot_matrix(interchr_contacts)
plt.savefig("test2.png")
plt.clf()
